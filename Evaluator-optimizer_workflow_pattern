<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>LLM Feedback Loop Diagram</title>
    <style>
        body {
            margin: 0;
            padding: 20px;
            font-family: Arial, sans-serif;
            background: #f9f9f9;
            display: flex;
            justify-content: center;
        }
        canvas {
            border: 1px solid #ddd;
        }
    </style>
</head>
<body>
<canvas id="llmDiagram" width="800" height="500"></canvas>

<script>
    const canvas = document.getElementById('llmDiagram');
    const ctx = canvas.getContext('2d');

    function drawRoundedRect(x, y, width, height, radius, color, text) {
        ctx.beginPath();
        ctx.moveTo(x + radius, y);
        ctx.lineTo(x + width - radius, y);
        ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
        ctx.lineTo(x + width, y + height - radius);
        ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
        ctx.lineTo(x + radius, y + height);
        ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
        ctx.lineTo(x, y + radius);
        ctx.quadraticCurveTo(x, y, x + radius, y);
        ctx.closePath();
        ctx.fillStyle = color;
        ctx.fill();
        ctx.strokeStyle = "#888";
        ctx.stroke();
        ctx.fillStyle = "#000";
        ctx.font = "16px Arial";
        ctx.textAlign = "center";
        ctx.textBaseline = "middle";
        // Support multi-line text
        const lines = text.split('\n');
        const lineHeight = 18;
        const startY = y + height / 2 - (lines.length - 1) * lineHeight / 2;
        lines.forEach((line, i) => {
            ctx.fillText(line, x + width / 2, startY + i * lineHeight);
        });
    }

    function drawArrow(fromX, fromY, toX, toY, text = "", lineWidth = 2) {
        const headlen = 10;
        const angle = Math.atan2(toY - fromY, toX - fromX);
        ctx.save();
        ctx.lineWidth = lineWidth;
        ctx.beginPath();
        ctx.moveTo(fromX, fromY);
        ctx.lineTo(toX, toY);
        ctx.strokeStyle = "#555";
        ctx.stroke();

        ctx.beginPath();
        ctx.moveTo(toX, toY);
        ctx.lineTo(toX - headlen * Math.cos(angle - Math.PI / 6), toY - headlen * Math.sin(angle - Math.PI / 6));
        ctx.lineTo(toX - headlen * Math.cos(angle + Math.PI / 6), toY - headlen * Math.sin(angle + Math.PI / 6));
        ctx.lineTo(toX, toY);
        ctx.fillStyle = "#555";
        ctx.fill();
        ctx.restore();

        if (text) {
            ctx.save();
            ctx.fillStyle = "#555";
            ctx.font = "14px Arial";
            ctx.textAlign = "left";
            ctx.textBaseline = "middle";
            // Place text to the right of the arrow for horizontal, below for vertical
            if (fromX === toX) {
                ctx.fillText(text, toX + 15, (fromY + toY) / 2);
            } else if (fromY === toY) {
                ctx.fillText(text, (fromX + toX) / 2, toY - 15);
            } else {
                ctx.fillText(text, (fromX + toX) / 2 + 10, (fromY + toY) / 2);
            }
            ctx.restore();
        }
    }

    // Center X for all boxes
    const centerX = 370;
    // Y positions for each box
    const inY = 30;
    const genY = 100;
    const evalY = 220;
    const outY = 370;

    // Draw elements (top to bottom)
    drawRoundedRect(centerX, inY, 60, 40, 10, "#fdd", "In");
    drawArrow(centerX + 30, inY + 40, centerX + 30, genY, "", 3); // down

    drawRoundedRect(centerX - 45, genY, 150, 60, 10, "#dfffe0", "LLM Call\nGenerator");
    drawArrow(centerX + 30, genY + 60, centerX + 30, evalY, "", 3); // down

    drawRoundedRect(centerX - 45, evalY, 160, 60, 10, "#dfffe0", "LLM Call\nEvaluator");
    drawArrow(centerX + 30, evalY + 60, centerX + 30, outY, "", 3); // down

    drawRoundedRect(centerX, outY, 60, 40, 10, "#fdd", "Out");

    // Feedback loop (from Evaluator to Generator, right side)
    // Vertical down from Evaluator
    drawArrow(centerX + 70, evalY + 1, centerX + 70, genY + 60, "Rejected + Feedback", 3);
    ctx.fillText("Solution", centerX - 15, (evalY + 70 + outY) / 3.4);
    // Horizontal lines for feedback loop
    ctx.save();
    ctx.strokeStyle = "#555";
    ctx.lineWidth = 2;
    // From Evaluator right to feedback loop
    ctx.beginPath();
    ctx.moveTo(centerX + 30 + 80, evalY + 30);
    ctx.lineTo(centerX + 115, evalY + 30);
    ctx.stroke();
    // From feedback loop left to Generator
    ctx.beginPath();
    ctx.moveTo(centerX + 115, genY + 30);
    ctx.lineTo(centerX + 30 + 80, genY + 30);
    ctx.stroke();
    ctx.restore();

    // Label for solution (right of vertical arrow from Evaluator to Out)
    ctx.save();
    ctx.fillStyle = "#333";
    ctx.font = "14px Arial";
    ctx.textAlign = "left";
    ctx.textBaseline = "middle";

    ctx.restore();
</script>
</body>
</html>
